package com.bridgelabz.datastructures;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.bridgelabz.algorithmprograms.Utility;

public class LinkedLists<T> {

	
public static class Node<T>
{
		T data;
		Node next;
}
  static Node head;

public LinkedLists(List<String> asList) {
	// TODO Auto-generated constructor stub
}

public LinkedLists() {
	// TODO Auto-generated constructor stub
}

public static  void printList() 
{ 
   Node currentNode = head;
   System.out.print("LinkedList: "); 
   // Traverse through the LinkedList 
   while (currentNode != null) 
   { 
   // Print the data at current node 
   System.out.print(currentNode.data + " "); 
   // Go to next node 
   currentNode = currentNode.next; 
   } 
} 
 
public  void insert(T data) 
{ 
   // Create a new node with given data 
   Node newnode = new Node<T>(); 
   newnode.data = data;
   newnode.next = null; 
  
   // If the Linked List is empty, 
   // then make the new node as head 
   if (head == null) 
   { 
    head = newnode; 
   } 
   else 
   { 
    // Else traverse till the last node 
    // and insert the new_node there    
        Node last = head; 
        while (last.next != null) 
        { 
          last = last.next; 
        } 
   // Insert the new_node at last node  
    last.next = newnode; 
   } 
}

//Checks whether the value x is present in linked list 
private boolean search(T i) 
{ 
    Node current = head;    //Initialize current 
    while (current != null) 
    { 
        if (current.data == i) 
            return true;    //data found 
        current = current.next; 
    } 
    return false;    //data not found 
} 




private void deleteByKey(T key) 
{ 
  // Store head node 
  Node temp = head;
  Node prev = null;  
      
  if (temp.data == key) 
  { 
    head = temp.next; // Changed head 
    // Display the message 
    System.out.println(key + " found and deleted"); 
    return;
    // Return the updated List 
  }
  while (temp != null && temp.data != key) 
  { 
            
            prev = temp; 
            temp = temp.next; 
  }
  if (temp == null) 
  { 
     // Display the message 
     System.out.println(key + " not found");
     return;
  } 
  prev.next = temp.next;
} 
 
 
public static void main(String[] args) throws IOException
{
		
		LinkedLists<Integer> l = new LinkedLists<Integer>();
		
		File file=new File("/home/admin1/Desktop/aa");     
	      FileReader fr=new FileReader(file);   
	      BufferedReader br = new BufferedReader(fr);
	      
	      String line = " ";
	   try {
		   while((line = br.readLine()) != null)
		      {
		    	  String[] str = line.split(",");
		    	 int []arr = new int[str.length];
		    	  System.out.println(Arrays.toString(str));
		    	  for (int i = 0; i < str.length; i++) {
					arr[i] = Integer.parseInt(str[i]);
				}
		    	 for (int i = 0; i < str.length; i++) {
					l.insert(arr[i]);
				}
		    	 l.printList();
//		    	  s = Utility.stringScanner();
//		    	 if (l.search(s)) {
//		    		 
//					System.out.println("Found");
//				}
//		    	 else
//		    	 {
//		    		 System.out.println("Not Found");
//		    	 }
//		    	
//		    	 l.deleteByKey(s);
//		    		
		      }

		
	       } catch (Exception e) 
	         {
	            System.out.println(e.getStackTrace());
		        // TODO: handle exception
	         }	
	   
		
		
		
		

}
}
