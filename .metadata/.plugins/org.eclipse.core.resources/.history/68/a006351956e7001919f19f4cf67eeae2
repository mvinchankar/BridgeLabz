package com.bridgelabz.datastructures;

import java.util.List;

import com.bridgelabz.algorithmprograms.Utility;

public class LinkedLists<T> {

	
	public static class Node<T>
	{
		T data;
		Node next;
		
	}
	
	Node head;
	 public static void printList(LinkedLists list) 
	    { 
	        Node currentNode = list.head; 
	   
	        System.out.print("LinkedList: "); 
	   
	        // Traverse through the LinkedList 
	        while (currentNode != null) { 
	            // Print the data at current node 
	            System.out.print(currentNode.data + " "); 
	   
	            // Go to next node 
	            currentNode = currentNode.next; 
	        } 
	    } 
	 public  void insert(T data) 
	    { 
	        // Create a new node with given data 
	        Node newnode = new Node(); 
	        newnode.data = data;
	        newnode.next = null; 
	  
	        // If the Linked List is empty, 
	        // then make the new node as head 
	        if (head == null) { 
	            head = newnode; 
	        } 
	        else { 
	            // Else traverse till the last node 
	            // and insert the new_node there    
	            Node last = head; 
	            while (last.next != null) { 
	                last = last.next; 
	            } 
	  
	            // Insert the new_node at last node  
	            last.next = newnode; 
	        } 
	        
	        
	        // Return the list by head 
	         
	    }
	 
	public void deleteNode(int position) 
	 { 
	    // If linked list is empty 
	    if (head == null) 
	       return; 
	   
	    // Store head node 
	    Node currentNode = head; 
	   
	     // If head needs to be removed 
	     if (position == 0) 
	     { 
	         head = currentNode->next;   // Change head 
	         free(currentNode);               // free old head 
	         return; 
	     } 
	   
	     // Find previous node of the node to be deleted 
	     for (int i=0; currentNode!=NULL && i<position-1; i++) 
	    	 currentNode = currentNode->next; 
	   
	     // If position is more than number of ndoes 
	     if (currentNode == NULL || currentNode->next == NULL) 
	          return; 
	   
	     // Node temp->next is the node to be deleted 
	     // Store pointer to the next of node to be deleted 
	     Node nextNode = currentNode->next->next; 
	   
	     // Unlink the node from linked list 
	     free(currentNode->next);  // Free memory 
	   
	     currentNode->next = nextNode;  // Unlink the deleted node from list 
	 } 
	   
	 
	 
	 
	  public void deleteByKey(T key) 
	    { 
	        // Store head node 
	        Node currentNode = head, prev = null; 
	  
	        // 
	        // CASE 1: 
	        // If head node itself holds the key to be deleted 
	  
	        if (currentNode != null && currentNode.data == key) { 
	            head = currentNode.next; // Changed head 
	  
	            // Display the message 
	            System.out.println(key + " found and deleted"); 
	  
	            // Return the updated List 
	            
	        } 
	  
	        // 
	        // CASE 2: 
	        // If the key is somewhere other than at head 
	        // 
	  
	        // Search for the key to be deleted, 
	        // keep track of the previous node 
	        // as it is needed to change currNode.next 
	        while (currentNode != null && currentNode.data != key) { 
	            // If currNode does not hold key 
	            // continue to next node 
	            prev = currentNode; 
	            currentNode = currentNode.next; 
	        } 
	  
	        // If the key was present, it should be at currNode 
	        // Therefore the currNode shall not be null 
	        if (currentNode != null) { 
	            // Since the key is at currNode 
	            // Unlink currNode from linked list 
	            prev.next = currentNode.next; 
	  
	            // Display the message 
	            System.out.println(key + " found and deleted"); 
	        } 
	  
	        // 
	        // CASE 3: The key is not present 
	        // 
	  
	        // If key was not present in linked list 
	        // currNode should be null 
	        if (currentNode == null) { 
	            // Display the message 
	            System.out.println(key + " not found"); 
	        } 
	  
	        // return the List 
	       
	    } 
	 
	 
	 
	 public void display() {
		 
	 Node currentNode = head;
     while (currentNode != null) { 
         // Print the data at current node 
         System.out.print(currentNode.data + " "); 

         // Go to next node 
         currentNode = currentNode.next; 
     } 
	 }
	public static void main(String[] args) {
		LinkedLists<String> f = new LinkedLists<String>();
		System.out.println("How many elements you want to store in linkedlist : ");
		int numberoftimes = Utility.integerScanner();
		System.out.println("Enter the elements");
		for (int i = 0; i < numberoftimes; i++) {
			String num = Utility.stringScanner();
			f.insert(num);
		}
		f.display();
		//printList(f);
		
	}
}
