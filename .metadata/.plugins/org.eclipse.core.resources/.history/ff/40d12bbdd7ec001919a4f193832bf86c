
package com.bridgelabz.datastructures;

import java.util.Scanner;

import com.bridgelabz.algorithmprograms.Utility;
import com.bridgelabz.functional.FunctionalUtility;

public class StackCalendarObjects {

	public static void main(String[] args) throws Exception 
	{
		FunctionalUtility leap = new FunctionalUtility();
		Utility day = new Utility();
		StackUtility<String> weekDay = new StackUtility<String>();
		StackUtility<Integer> weekDate = new StackUtility<Integer>();
		Scanner sc = new Scanner(System.in);
		weekDay.push("S");
		weekDay.push("S");
		weekDay.push("F");
		weekDay.push("T");
		weekDay.push("W");
		weekDay.push("T");
		weekDay.push("M");
		System.out.println("please enter year");
		int year = sc.nextInt();
		System.out.println(""+"1.Jan\n"
				+ "2.Feb\n"
				+ "3.Mar\n"
				+ "4.apr\n"
				+ "5.may\n"
				+ "6.jun\n"
				+ "7.jul\n"
				+ "8.aug\n"
				+ "9.sept\n"
				+ "10.oct\n"
				+ "11.nov\n"
				+ "12.dec");
		int month = sc.nextInt();
		String[] months= {"","January","Febuary","March","April","May","June","July","August"
				,"September","October","November","December"};
		
		int[] days = {0,31,28,31,30,31,30,31,31,30,31,30,31};
		
		if(month==2 && leap.leapYear(year));
		{
			days[month]=29;
		}
		System.out.println(month);
		int d= day.daysOfWeek(1,month,2019);

		
		for(int i=days[month];i>0;i--)
		{
			weekDate.push(i);
		}
		for(int j=0;j<d;j++)
		{
			weekDate.push(0);
		}


Skip to content
Using Gmail with screen readers

1 of 5,140
(no subject)
Inbox
x

akshay patwari <akshaypatwari24@gmail.com>
Attachments
3:21 PM (10 minutes ago)
to me

Attachments area

package com.bridgelabz.datastructure;


class node<T>
{
	T data;
	node next;
}

public class StackUtility<T>
{
	node<T> head;
	
//	public node<T> stack()
//	{
//		node newNode = new node();
//		return newNode;
//	}
	
	
	
	public void push(T data)
	{
		node<T> newNode = new node();
		newNode.data = data;
		newNode.next = null;

		newNode.next = head;
		head = newNode;

	}
	
	public node pop()
	{
		node previous = null;
		try
		{
			previous = head;
			head = head.next;
		}
		catch(NullPointerException e)
		{
			System.out.println("Stack is Empty");
		}
		return previous;
	}
	
	
	public Object peek()
	{
		return head.data;
	}
	
	
	public int size()
	{
		int counter=0;
		node traversingNode = head;
		while(traversingNode.next != null)
		{
			counter++;
			traversingNode = traversingNode.next;
		}
		counter++;
		return counter;			
	}
	
	public boolean isEmpty()
	{
		if(head == null)
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	
	public void showFullStack()
	{
		node traversingNode;
		try
		{
			traversingNode = head;
			System.out.println(head.data);
			while(traversingNode.next != null)
			{
				
				traversingNode = traversingNode.next;
				System.out.println(traversingNode.data+"");
			}
		}
		catch(NullPointerException e)
		{
			System.out.println("Stack is empty");
		}
		
	}
}


	}

}
