package com.bridgelabz.datastructures;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;

import javax.imageio.IIOException;

public class LinkedList<T> {
	private ConnectNode<T> first;
	private ConnectNode<T> last;
	private int count;

	/**
	 * Internal linked node implementation
	 * 
	 *  
	 * 
	 * @param <T>
	 */
	private class ConnectNode<T> {
		private T data;
		private ConnectNode<T> next;

		public ConnectNode() {
			this.data = null;
			this.next = null;
		}

		public ConnectNode(T obj) {
			this.data = obj;
			this.next = null;
		}
//For getting data from linked list
		public T getData() {
			return data;
		}
//For setting or allocating the data to a node
		public void setData(T data) {
			this.data = data;
		}
//for getting the next node
		public ConnectNode<T> getNext() {
			return next;
		}
//for setting head to next 
		public void setNext(ConnectNode<T> next) {
			this.next = next;
		}

	}

	public LinkedList() {
		ConnectNode<T> newLiked = new ConnectNode<T>();
		this.first = newLiked;
		this.last = this.first;
	}

	/**
	 * Add values to the list
	 * 
	 * @param data
	 */
	public void add(T data) {
		ConnectNode<T> newData = new ConnectNode<T>(data);
		if (this.first.getData() == null) {
			this.first = newData;
			this.last = this.first;
		} else {
			this.last.setNext(newData);
			this.last = newData;
		}
		count++;
	}

	/**
	 * Remove values from the list
	 *  
	 * @param data
	 */
	public void remove(T data) {
		ConnectNode<T> current = first;
		if (this.first.getData().equals(data)) {
			if (this.first.getNext() == null) {
				ConnectNode<T> newNode = new ConnectNode<T>();
				this.first.setData(null);
				this.first = newNode;
				this.last = this.first;
			} else {
				this.first.setData(null);
				this.first = this.first.getNext();
			}
		} else {
			boolean wasDeleted = false;
			while (!wasDeleted) {
				ConnectNode<T> currentNext = current.getNext();
				if (currentNext.getData().equals(data)) {
					currentNext.setData(null);
					current.setNext(currentNext.getNext());
					currentNext = null;
					wasDeleted = true;
					count--;
				} else {
					current = current.getNext();
				}
			}
		}
	}

	public void print() {
		boolean allPrinted = false;
		ConnectNode<T> crr = first;
		System.out.print("[");
		while (!allPrinted) {
			if (crr.getData() != null) {
				if (crr.getNext() != null) {
					System.out.print(crr.getData().toString() + ",");
					ConnectNode<T> crrNext = crr.getNext();
					crr = crrNext;
				} else {
					System.out.print(crr.getData().toString() + "]");
					allPrinted = true;
				}
			} else {
				allPrinted = true;
			}
		}
		System.out.println();
	}

	public int getCount() {
		return count;
	}

	public static void main(String[] args) throws IOException {
		LinkedList<Integer> linkedLst = new LinkedList<Integer>();
		
		  File f=new File("/home/admin1/Desktop/aa");     
	      FileReader fr=new FileReader(f);   
	      BufferedReader br = new BufferedReader(fr);
		linkedLst.add(2);
		linkedLst.add(3);
		linkedLst.add(12);
		linkedLst.add(25);
		linkedLst.add(100);

		linkedLst.print();
		System.out.println(linkedLst.getCount());

		linkedLst.remove(1000);

		linkedLst.print();

		System.out.println(linkedLst.getCount());

	}
}