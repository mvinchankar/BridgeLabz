package com.bridgelabz.algorithmprograms;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;

public class Utility {
	
static Scanner scanner = new Scanner(System.in);
public static int integerScanner() 
{
	
	int inputInteger = scanner.nextInt();
	return inputInteger;
	
}

public static double doubleScanner()
{
	double inputdouble = scanner.nextDouble();
	return inputdouble;
}

public static String stringScanner() 
{

	String inputString = scanner.next();
	return inputString;
}

public static float floatScanner()
{
	Float inputfloat =scanner.nextFloat();
	return inputfloat;
}


/**
 * isAnagram method to check whether the string are Anagram or not
 * @param string1
 * @param string2
 */
public static void isAnagram(String string1, String string2)
{
 
	char[] c1 = string1.toCharArray();                  
	char[] c2 = string2.toCharArray();
	
	if(c1.length == c2.length)
	{
		Arrays.sort(c1);                                  //Sort the Char Array C1
		Arrays.sort(c2);                                  //Sort the Char Array C2
	}
	String s3 = new String(c1);                           //Put the Array elements into the String
	String s4 = new String(c2);
	
	//Compare the Strings
	if(s3.equalsIgnoreCase(s4))                           
	{
		System.out.println("Are Anagrams");;
	}
	else
	{
		System.out.println("Not Anagrams");
	}
}

/**
 * Prime Method to find Prime series
 * @param range
 */
public static void isPrime(int range)                      //Enter the Range
	{
		int count  = 0;
		String [] a=new String [1000];
		for (int i = 2; i<range; i++)    
		{
			int cn=i;                              
			for (int j = 2; j <= cn/2; j++) 
			if (cn % j == 0) 
			    {
			      a[count] =String.valueOf(cn);
			      count++;
			    }
			
		  if(count == 0) 
		  System.out.println(cn);
		  
    
		}
    
}

 /**
  * isPalindrome Method to find Palindrome Numbers 
  * @param num
  */
public static void isPalindrome(int num) 
{
	int count  = 0;
	String [] a=new String [1000];
	for (int i = 2; i<num; i++) 
	{
		int cn=i;
		count = 0;
		for (int j = 2; j <= cn/2; j++) 
		{
		    if (cn % j == 0) 
		    {
		      a[count] =String.valueOf(cn);
		      count++;
		      
              //break;
		    }
		}
	  if(count == 0) 
	  {
	    int temp = cn;
	    int sum = 0;
	    while(cn>0) 
	    {
			int rem = cn%10;
	    	sum = (sum*10) + rem;
	    	cn = cn/10;
	    }
	    if(temp == sum)
	    {
	      System.out.println("  "+temp);	

	    }
      }
	
	}

  }
/**
 * isPrimeAnagram Method to check whether the numbers are Anagram or not
 * @param value1
 * @param value2
 * @return
 */
 public static boolean isPrimeAnagram(int value1, int value2)
 {
	 boolean flag = false;
	 String s1 = String.valueOf(value1);
	 String s2 = String.valueOf(value2);
	 
	 char[] c1 = s1.toCharArray();
	 char[] c2 = s2.toCharArray();
	
	 if(c1.length == c2.length)
	 {
		Arrays.sort(c1);
		Arrays.sort(c2);
	 }
	 String s3 = new String(c1);
	 String s4 = new String(c2);
	 if(s3.equals(s4))
	 {
		return true;
	 }
	 return false;
 }
 
 /**
  * printAnagram method to find Anagram in Primenumber Series
  * @param range
  * @return
  */
 public static int [] printAnagram(int range)
 {
	   int [] anagram = new int [range];
	   int[] prime = new int [range];
	   //Initialize position to zero
	   int position =0;                                        
	   for (int i = 2; i < range; i++) 
	   {
		  int  count = 0;
		  for (int j = 2; j <= i / 2; j++) 
		   if (i % j == 0) 
		    count++;
		    
		  if (count == 0) 
		  prime[i] = i ;                                        //Copying prime numbers to an Array
		  
		  if(prime[i] != 0)
		  for (int j = 1; j <prime.length; j++)  
		   if(prime[i] != prime[j])                            
			if(Utility.isPrimeAnagram(prime[i],prime[j]))       //isPrimeAnagram method to check whether the number are Anagram or not
	         anagram[position++] = prime[j];
	  }
	  //return the anagram 
     return anagram;                                              
}
 
public static int binarySearchIntegers(int array[],int first,int last, int index) 
{ 
      if (last >= first) 
      { 
            int mid = first + (last - first) / 2; 
            if (array[mid] == index) 
                return mid; 
            if (array[mid] > index) 
                return binarySearchIntegers(array, first, mid - 1, index); 
            return binarySearchIntegers(array, mid + 1, last, index); 
      } 
  
      return -1; 
 } 
public static void stringBinarySearch(String array[],String key, int length)
{ 
	    int first = 0 ; 
	    int last = array.length; 
	    System.out.println(Arrays.toString(array));
	   
	    while (first <= last)  
	    { 
	        int  mid = first + (last-first)/2; 
		    int index = key.compareTo(array[mid]);
		    if(index > 0) 
		          first = mid + 1;    
		    else if (index == 0) 
		    {
		       System.out.println("String found at :" + mid);
	           break;
	        }
	        else
	    	   last = mid - 1; 	
        }
    
         if(first > last)      
    	System.out.println("Not  Present");
}


public static String[] insertionsortString(String array[], int f)
{
	String temp="";
	for(int i=0;i<f;i++)
	{
	  for(int j=i+1;j<f;j++)
	  {
	    if(array[i].compareToIgnoreCase(array[j])>0)
	    {
	     temp = array[i];
	     array[i]=array[j];
	     array[j]=temp;
	    }
	  }
	}
	  return array;
}
public static void insertionSort(int array[]) 
{  
     int n = array.length;  
     for (int j = 1; j < n; j++)
     {  
         int key = array[j];  
         int i = j-1;  
         while ( (i > -1) && ( array[i] > key ) ) 
         {  
             array[i+1] = array[i];  
             i--;  
         }  
         array[i+1] = key;  
     }  
}  

 public static void bubbleSort(int[] array)
 {  
       
    int temp = 0;  
     for(int i=0; i < array.length; i++)
     {  
             for(int j=1; j < (array.length-i); j++)
             {  
                      if(array[j-1] > array[j])
                      {  
                             //swap elements  
                             temp = array[j-1];  
                             array[j-1] = array[j];  
                             array[j] = temp;  
                      }  
                      
             }  
     }  
  
 }  

 public static void sortStrings(String[] arr, int n)  
 { 
        String temp; 
        for (int j = 0; j < n ; j++) 
        { 
            for (int i = j + 1; i < n; i++)  
            { 
                if (arr[j].compareTo(arr[i]) > 0) 
                { 
                    temp = arr[j]; 
                    arr[j] = arr[i]; 
                    arr[i] = temp; 
                } 
            } 
            System.out.println(arr[j]);
        } 
 }
 
 
 
public static void daysOfWeek(int day,int month,int year) 
{
	 String []array ={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
		int y = year - (14-month)/12;
		int x = y +(y/4) - (y/100) +(y/400);
		int m = month +12 *((14-month)/12)-2;
		int d = (day+x+(31*m)/12)%7;
		System.out.println(array[d]);
		
}

public static void CelsiustoFahrenhiet(double celsius)
{
		double result = (celsius *9/5)+32;
		System.out.println(result);
	}
	public static void FahrenhiettoCelsius(double fahrenhiet) {
		double result = (fahrenhiet-32)*5/9;
		System.out.println(result);
	}
	public static void monthlypaymentCalculate(int year,int principal_loan,float rateofinterest) {
		
		float n = 12*year;
		float r = rateofinterest/(12*100);
		double divisor = Math.pow((1+r), -n);
	    double p = principal_loan *r;
	    double payment = (p)/(1-(divisor));
        System.out.println("Payment will be :" + payment +"Rs.");	
}

				
public static void sqrt(double c) {
	
		
		double t = c;
		double epsilon = 1E-15;
		while(Math.abs(t - c/t) > epsilon*t)
		{
			t = ((c/t) + t)/2;
		}
		System.out.println(t);
		
		

	}
public static void readFromFile() throws IOException 
{		
	  File f=new File("/home/admin1/Desktop/aa");     
      FileReader fr=new FileReader(f);   
      BufferedReader br = new BufferedReader(fr);
      
      String line = "";
   try {
	   while((line = br.readLine()) != null)
	      {
	    	  String[] str = line.split(",");
	    	  System.out.println(Arrays.toString(str));
	    	  System.out.println("Enter the string to be searched :"); 
	    		String key = Utility.stringScanner();
	    		Utility.stringBinarySearch(str, key, str.length);
	      }
	   
	
       } catch (Exception e) 
         {
            System.out.println(e.getStackTrace());
	        // TODO: handle exception
         }
      

}

public static void merge(int arr[], int low, int mid, int end)  
{  

     int sublength1 = mid - low + 1;  
     int sublength2= end - mid;  

     int subArray1[] = new int [sublength1];  
     int subArray2[] = new int [sublength2];  

     for (int i=0; i<sublength1; ++i)  
     subArray1[i] = arr[low + i];  

     for (int j=0; j<sublength2; ++j)  
     subArray2[j] = arr[mid + 1+ j];  


     int i = 0, j = 0;  
     int k = low;  
    while (i<sublength1&&j<sublength2)  
    {  
		if (subArray1[i] <= subArray2[j])  
		{  
		  arr[k] = subArray1[i];  
		  i++;  
		}  
		else  
		{  
		 arr[k] = subArray2[j];  
		 j++;  
		}  
		 k++;  
	}  
	while (i<sublength1)  
	{  
		arr[k] = subArray1[i];  
		i++;  
		k++;  
	}  
		  
	while (j<sublength2)  
	{  
		arr[k] = subArray2[j];  
		j++;  
		k++;  
	}  
}  

   public static void  mergeSort(int arr[], int low, int end)  
   {  
      if (low<end)  
      {  
        int mid = (low+end)/2;  
        mergeSort(arr, low, mid);  
        mergeSort(arr , mid+1, end);  
        merge(arr, low, mid, end);  
      }  
   }
   
   public static void toDecimal(int num) 
   {
		
	  int []array = new int [8];
	 // int i=0;
		int [] subArray1 = new int [4];
		int [] subArray2 = new int [4];
		int [] result = new int [8];
		String str=" ";
		String str2 = "";
		String res = " ";	
	   while(num>0)
	   {
		 for (int j = 0; j < array.length; j++) 
		 {
			array[j] = num%2;
			str = str + array[j];
		    num = num/2;
		 }
   	   }
	   
		
	   for (int i = str.length()-1; i >= 0; i--) 
	   {
	//	System.out.println(array[i]);
		str2 = str2 + str.charAt(i);
		
	   }
	   System.out.println("The Binary Conversion is :");
	   System.out.println(str2);
	
	  String k = str2.substring(0,4);
	
	  String k2 = str2.substring(4,8);

	   
      res = k2.concat(k);
      System.out.println(res);
      
      int decimal=Integer.parseInt(res,2);  
      System.out.println(decimal);  
      
	   
   }
   public static void toBinary(int num) 
   {
		
	  int []array = new int [8];
	 
		int [] subArray1 = new int [4];
		int [] subArray2 = new int [4];
		int [] result = new int [8];
		
	   while(num>0)
	   {
		 for (int j = 0; j < array.length; j++) 
		 {
			array[j] = num%2;
			
		    num = num/2;
		 }
   	   }
	   
		
	   for (int i = array.length-1; i >= 0; i--) 
	   {
		System.out.println(array[i]);
	   }
   }
  
   public static int [] Prime(int range) {
	   int count  = 0;
	    ArrayList<Integer> list= new ArrayList<>();
	 	String [] a=new String [1000];
		for (int i = 2; i<range; i++) 
		{
			int cn=i;
			count = 0;
			for (int j = 2; j <= cn/2; j++) 
			{
			    if (cn % j == 0) 
			    {
			      a[count] =String.valueOf(cn);
			      count++;
			      
	              //break;
			    }
			}
		  if(count == 0) 
		  {
		   list.add(cn);
	    
	}
	
}