package com.bridgelabz.datastructures;

public class DequeueUtility<T> {
	 private Node head;
	 private Node tail;
	 
	 static class Node<T>{
	  //data
	  T data;
	  // next node in the list
	  Node next;
	  // previous node in the list
	  Node prev;
	 
	  public void displayData(){
	   System.out.print(data + " ");
	  }
	 }
	 // constructor
	 public DequeueUtility() {
	  head = null;
	  tail = null;
	 }
	 
	 public boolean isEmpty(){
	  return head == null;
	 }
	 
	 public void insertFirst(T data){
	  //Create a new node
	  Node newNode = new Node();
	  newNode.data = data;
	 
	  if(isEmpty())
	  {                              // if first insertion tail should
		 tail = newNode;                                          // also point to this node
	  }
	  else
	  {
	   head.prev = newNode;
	  }
	  newNode.next = head;
	  head = newNode;
	 }
	 

	 public void insertLast(T data)
	 {
	   Node newNode = new Node();
	   newNode.data = data;
	 
	   if(isEmpty())
	   {
	    head = newNode;
	   }
	   else
	   {
	    tail.next = newNode;
	    newNode.prev = tail;
	   }
	   tail = newNode;
	 }
	 
	 public Node removeFirst()
	 {
	  if(head == null)
	  {
	   throw new RuntimeException("Deque is empty");
	  }
	  Node first = head;
	  if(head.next == null)
	  {
	   tail = null;
	  }
	  else
	  {
	   // previous of next node (new first) becomes null
	   head.next.prev = null;
	  }
	  head = head.next;
	  return first;
	 }
	 
	 public Node removeLast()
	 {
	  if(tail == null)
	  {
	   throw new RuntimeException("Deque is empty");
	  }
	  Node last = tail;
	  if(head.next == null)
	  {
	   head = null;
	  }
	  else
	  {
	   // next of previous node (new last) becomes null
	   tail.prev.next = null;
	  }
	  tail = tail.prev;
	  return last;
	 }
	 
	 public int getFirst()
	 {
	  if(isEmpty())
	  {
	   throw new RuntimeException("Deque is empty");
	  }
	  return head.data;
	 }
	 
	 public int getLast(){
	  if(isEmpty()){
	   throw new RuntimeException("Deque is empty");
	  }
	  return tail.i;
	 }
	 
	 // Method for forward traversal
	 public void displayForward(){
	  Node current = head;
	  while(current != null){
	   current.displayData();
	   current = current.next;
	  }
	  System.out.println("");
	 }
	 
	 // Method to traverse and display all nodes
	 public void displayBackward(){
	  Node current = tail;
	  while(current != null){
	   current.displayData();
	   current = current.prev;
	  }
	  System.out.println("");
	 }

}
