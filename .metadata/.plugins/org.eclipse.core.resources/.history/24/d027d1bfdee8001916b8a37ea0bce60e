package com.bridgelabz.datastructures;

public class QueueUtility<T> {
	 private class Node<T> {
		T data;
		Node next;
		public Node(T v) {
			this.data  = v;
		}
	}
	
	private int size;
	private Node<T> front;
	private Node<T> rear;
	
	public QueueUtility() {
		size = 0;
		front = null;
		rear = null;
	}
	
	public int size() {
		return size;
	}
	
	public boolean isEmpty() {
		return size == 0;
	}
	
	
	public void add(T data) {
		if (front == null) {
			front = new Node(data);
			rear = front;
		} else {
			rear.next = new Node(data);
			rear = rear.next;
		}
		
		size++;
	}
	
	public T remove() {
		if (size == 0) return null;
		
		T data = front.data;
		front = front.next;
		size--;
		
		return data;
	}
	
	
	public T peek() {
		if (size == 0) return null;
		
		T data = front.data;
		
		return data;
	}
	public void display()
	{
	   if(front == null)
	      System.out.println("Queue is empty !!!!!");
	   else{
	       Node temp = front;
	      while(temp.next != null)
	      {
		    System.out.println(temp.data);
		    temp = temp.next;
	      }
	      System.out.println(temp.data);
	      return;
	   }
	  
	}
	
}
