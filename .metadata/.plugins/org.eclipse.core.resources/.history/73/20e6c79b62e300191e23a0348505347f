package com.bridgelabz.algorithmprograms;

import java.util.Arrays;
import java.util.Scanner;

public class Utility {
	static Scanner scanner = new Scanner(System.in);
	public static int integerScanner() 
	{
		
		int inputInteger = scanner.nextInt();
		return inputInteger;
		
	}
    public static double doubleScanner()
    {
    	double inputdouble = scanner.nextDouble();
    	return inputdouble;
    }

    public static String stringScanner() {
	
    	String inputString = scanner.nextLine();
    	return inputString;
	
	
}
    
    public static float floatScanner()
    {
    	Float inputfloat =scanner.nextFloat();
    	return inputfloat;
    }
    
    
  
    public static void isPrime(int num) {
		int count = 0;
	    String [] a=new String [1000];
		
		for (int i = 2; i<=num; i++) 
		{
			int cn=i;
			count = 0;
			for (int j = 2; j <= cn/2; j++) 
			{
			    if (cn % j == 0) 
			    {
			      a[count] =String.valueOf(cn);
			      count++;
	              //break;
			    }
		    }
		
           if(count == 0) 
		   {
        	  System.out.println(" "+ cn); 
	}
		}
	}
	public static void isPalindrome(int num) {
		int count  = 0;
		String [] a=new String [1000];
		for (int i = 1; i<num; i++) 
		{
			int cn=i;
			count = 0;
			for (int j = 2; j <= cn/2; j++) 
			{
			    if (cn % j == 0) 
			    {
			      a[count] =String.valueOf(cn);
			      count++;
			      
	              //break;
			    }
			}
		  if(count == 0) 
		   {
       	  //System.out.print(" "+ cn); 
   		    int temp = cn;
   		    int sum = 0;
   			   while(cn>0) 
   			   {
   				   
   		    	int rem = cn%10;
   		    	sum = (sum*10) + rem;
   		    	cn = cn/10;
   		       }
   		       if(temp == sum)
   		       {
   		        System.out.println("  "+temp);	

   		       }
	       }
		 // if(a[i] != null)
		//  System.out.println(a[i]);
	}

  }
	 public static boolean isPrimeAnagram(int a1, int a2)
	 {
		 boolean flag = false;
		 String s1 = String.valueOf(a1);
		 String s2 = String.valueOf(a2);
		 
		char[] c1 = s1.toCharArray();
		char[] c2 = s2.toCharArray();
		
		if(c1.length == c2.length)
		{
			Arrays.sort(c1);
			Arrays.sort(c2);
		}
		String s3 = new String(c1);
		String s4 = new String(c2);
		if(s3.equals(s4))
		{
			return true;
		}
		return false;
	 }
	   public static void printAnagram(int num) {
		   int[] prime = new int [num];
		   for (int i = 2; i < num; i++) {
			  int  count = 0;
			   for (int j = 2; j <= i / 2; j++) {
			    if (i % j == 0) {
			     count++;
			     //break;
			    }
			   }

			   if (count == 0) {
			  // System.out.println(i);
	           prime[i] = i ;
				
			   }
			   if(prime[i] != 0)
			   for (int j = 1; j <prime.length; j++) {
				   if(prime[i] != prime[j])
				   {
				   if(Utility.isPrimeAnagram(prime[i],prime[j]))
				   {
					   System.out.println(prime[i]+ " isAnagramsof  " +prime[j]);
				
			}}
			   }
		   
		   
		   
		 
	         

		}

	}
	   public static void binarysearch(int brr[],int l,int r,int u)
	   {

		    System.out.println("Enter value to find");
		    search = in.nextInt();
		 
		    first  = 0;
		    last   = n - 1;
		    middle = (first + last)/2;
		 
		    while( first <= last )
		    {
		      if ( array[middle] < search )
		        first = middle + 1;    
		      else if ( array[middle] == search )
		      {
		        System.out.println(search + " found at location " + (middle + 1) + ".");
		        break;
		      }
		      else
		         last = middle - 1;
		 
		      middle = (first + last)/2;
		   }
		   if (first > last)
		      System.out.println(search + " isn't present in the list.\n");
		  }
	   }
		public static int binarysearchintegers(int brr[],int l,int r, int u) 
	    { 
	        if (r >= l) { 
	            int mid = l + (r - l) / 2; 
	  
	            // If the element is present at the 
	            // middle itself 
	            if (brr[mid] == u) 
	                return mid; 
	  
	            // If element is smaller than mid, then 
	            // it can only be present in left subarray 
	            if (brr[mid] > u) 
	                return binarysearchintegers(brr, l, mid - 1, u); 
	  
	            // Else the element can only be present 
	            // in right subarray 
	            return binarysearchintegers(brr, mid + 1, r, u); 
	        } 
	  
	        // We reach here when element is not present 
	        // in array 
	        return -1; 
	    } 
	  
public static int binarySearch(String[] arr, String x) 
{ 
    int l = 0, r = arr.length - 1; 
    while (l <= r) { 
        int m = l + (r - l) / 2; 

        int res = x.compareTo(arr[m]); 

        // Check if x is present at mid 
        if (res == 0) 
            return m; 

        // If x greater, ignore left half 
        if (res > 0) 
            l = m + 1; 

        // If x is smaller, ignore right half 
        else
            r = m - 1; 
    } 

    return -1; 
} 

public static String[] sort_sub(String array[], int f){
	String temp="";
	for(int i=0;i<f;i++){
	for(int j=i+1;j<f;j++){
	if(array[i].compareToIgnoreCase(array[j])>0){
	temp = array[i];
	array[i]=array[j];
	array[j]=temp;
	}
	}
	}
	return array;
	}
 public static void insertionSort(int ar[]) {  
     int n = ar.length;  
     for (int j = 1; j < n; j++) {  
         int key = ar[j];  
         int i = j-1;  
         while ( (i > -1) && ( ar[i] > key ) ) {  
             ar[i+1] = ar[i];  
             i--;  
         }  
         ar[i+1] = key;  
     }  
 }  

 static void bubbleSort(int[] ab) {  
        int n = ab.length;  
        int temp = 0;  
         for(int i=0; i < n; i++){  
                 for(int j=1; j < (n-i); j++){  
                          if(ab[j-1] > ab[j]){  
                                 //swap elements  
                                 temp = ab[j-1];  
                                 ab[j-1] = ab[j];  
                                 ab[j] = temp;  
                         }  
                          
                 }  
         }  
  
    }  

 public static void sortStrings(String[] arr, int n)  
    { 
        String temp; 
  
        // Sorting strings using bubble sort 
        for (int j = 1; j < n - 1; j++) 
        { 
            for (int i = j + 1; i < n; i++)  
            { 
                if (arr[j].compareTo(arr[i]) > 0) 
                { 
                    temp = arr[j]; 
                    arr[j] = arr[i]; 
                    arr[i] = temp; 
                } 
            } 
        } 
    }
 public static boolean isAnagram(int a1, int a2)
 {
	 boolean flag = false;
	 String s1 = String.valueOf(a1);
	 String s2 = String.valueOf(a2);
	 
	char[] c1 = s1.toCharArray();
	char[] c2 = s2.toCharArray();
	
	if(c1.length == c2.length)
	{
		Arrays.sort(c1);
		Arrays.sort(c2);
	}
	String s3 = new String(c1);
	String s4 = new String(c2);
	if(s3.equals(s4))
	{
		return true;
	}
	return false;
 }
}