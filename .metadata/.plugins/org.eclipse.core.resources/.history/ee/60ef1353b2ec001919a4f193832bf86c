package com.bridgelabz.datastructures;

import com.bridgelabz.algorithmprograms.Utility;

public class QueueUtility<T> 
{
	/**
	 * 
	 * Node creation class is type of generic 
	 *
	 * @param <T>
	 */
	 private class Node<T> 
	 {
		T data;
		Node next;
		public Node(T v) 
		{
			this.data  = v;
		}
	 }
	
	private int size;
	private Node<T> front;
	private Node<T> rear;
	
	/**
	 * Creation of Queue
	 */
	public QueueUtility() {
		size = 0;
		front = null;
		rear = null;
	}
	
	/**
	 * Size of Queue
	 * @return
	 */
	public int size() {
		return size;
	}
	
	/**
	 * IsEmpty  to check Queue is empty or not
	 * @return
	 */
	public boolean isEmpty() {
		return size == 0;
	}
	
	/**
	 * Enqueue method to add elements in Queue
	 * @param data
	 */
	public void enqueue(T data) {
		if (front == null) {
			front = new Node(data);        
			rear = front;                      //make front and rear equals as no element is present
		} 
		else {
			rear.next = new Node(data);        
			
			rear = rear.next;
		}
		size++;
	}
	
	/**
	 * dequeue method to remove the elements from Queue
	 * @return
	 */
	public T dequeue() {
		if (size == 0) 
		return null;
		
		T data = front.data;
		front = front.next;
		size--;
		
		return data;
	}
	
	/**
	 * To find the peek means top element
	 */
	public T peek() {
		if (size == 0) 
		return null;
		
		T data = front.data;                         
		
		return data;
	}
	
	/**
	 * Display method to print the queue elements
	 */
	public void display()
	{
	   if(front == null)
	      System.out.println("Queue is empty !!!!!");
	   else{
	       Node temp = front;
	      while(temp.next != null)
	      {
		    System.out.println(temp.data);
		    temp = temp.next;
	      }
	      System.out.println(temp.data);
	      return;
	   }
	  
	}

/**
 * print Anagram method to print the Anagram
 * @param range
 * @return
 */
public static int [] printAnagram(int range)
{
	int [] anagram = new int [range];
    int[] prime = new int [range];
    int position =0;
    for (int i = 2; i < range; i++) 
    {
	  int  count = 0;
	  for (int j = 2; j <= i / 2; j++) 
	  {
	    if (i % j == 0) 
	    {
	    count++;
	    }
	  }

	  if (count == 0) 
	  {
         prime[i] = i ;                                  //copying the prime numbers to prime array
	  }
	  if(prime[i] != 0)
	  for (int j = 1; j <prime.length; j++) 
	   if(prime[i] != prime[j])
		if(Utility.isPrimeAnagram(prime[i],prime[j]))    //method to find the anagram in Utility
		  anagram[position++] = prime[j];
	 // System.out.println(Arrays.toString(anagram));
     }    
    return anagram;
	}	
}